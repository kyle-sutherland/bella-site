import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Navigation from "./components/Navigation";
import { fetchAPI } from "./utils/fetch-api";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type Category = {
  id: number;
  name: string;
  slug: string;
};

async function getCategories(): Promise<Category[]> {
  try {
    const token = process.env.NEXT_PUBLIC_STRAPI_API_TOKEN;
    const options = token
      ? { headers: { Authorization: `Bearer ${token}` } }
      : {};
    const responseData = await fetchAPI("/categories", {}, options);
    // Handle both array and object responses from Strapi
    const categories = Array.isArray(responseData)
      ? responseData
      : responseData.data || [];
    return categories;
  } catch (error) {
    console.error("Failed to fetch categories:", error);
    return [];
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const categories = await getCategories();

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Navigation categories={categories} />
        {children}
      </body>
    </html>
  );
}
